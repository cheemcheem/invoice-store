name: CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Start NPM Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{runner.os}}-npm-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{runner.os}}-npm-${{hashFiles('**/package-lock.json')}}
            ${{runner.os}}-npm-
      - name: Start Maven Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{runner.os}}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{runner.os}}-m2-${{ hashFiles('**/pom.xml') }}
            ${{runner.os}}-m2-
      - name: Set up JDK 13
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Compile with Maven
        run: ./mvnw -B clean compile -DskipTests --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Target Folder
        uses: actions/upload-artifact@master
        with:
          name: maven compile
          path: target/

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Start NPM Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{runner.os}}-npm-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{runner.os}}-npm-${{hashFiles('**/package-lock.json')}}
            ${{runner.os}}-npm-
      - name: Start Maven Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{runner.os}}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{runner.os}}-m2-${{ hashFiles('**/pom.xml') }}
            ${{runner.os}}-m2-
      - name: Set up JDK 13
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Download Target Folder
        uses: actions/download-artifact@master
        with:
          name: maven compile
          path: target/
      - name: Test with Maven
        run: ./mvnw -B test --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package:
    name: Package
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Start NPM Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{runner.os}}-npm-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{runner.os}}-npm-${{hashFiles('**/package-lock.json')}}
            ${{runner.os}}-npm-
      - name: Start Maven Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{runner.os}}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{runner.os}}-m2-${{ hashFiles('**/pom.xml') }}
            ${{runner.os}}-m2-
      - name: Set up JDK 13
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Download Target Folder
        uses: actions/download-artifact@master
        with:
          name: maven compile
          path: target/
      - name: Build with Maven
        run: ./mvnw -B package -DskipTests --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Target Folder
        uses: actions/upload-artifact@master
        with:
          name: maven package
          path: target/

  deploy:
    name: Deploy
    needs: package
    if: ${{github.ref == 'refs/heads/develop'}}
    runs-on: ubuntu-latest
    steps:
      - name: Download Target Folder
        uses: actions/download-artifact@master
        with:
          name: maven package
          path: target/
      - name: Prepare SSH Key and Artefact
        run: 'echo "$SSH_KEY" > key && /bin/chmod 700 key && /bin/chmod 700 target && /bin/chmod 700 target/invoice-store.jar'
        shell: bash
        env:
          SSH_KEY: ${{secrets.KEY}}
      - name: Upload Project to Dev Server
        run: /usr/bin/scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i key target/invoice-store.jar ${{secrets.REMOTE}}:${{secrets.PATH}}
      - name: Deploy Project on Dev Server
        run: /usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i key ${{secrets.REMOTE}} ${{secrets.RESTART_SERVICE}}
#        TODO find way around IFTTT 10 Applet limit, possibly combine these into one Applet
#      - name: Alert IFTTT
#        uses: distributhor/workflow-webhook@v1
#        env:
#          webhook_url: ${{secrets.IFTTT_URL}}
#          webhook_secret: ${{secrets.IFTTT_SECRET}}